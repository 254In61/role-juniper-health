---
# Junos ansible facts
- name: Gather Junos-specific facts - PRE-UPGRADE
  junipernetworks.junos.junos_facts:
    gather_subset:
      - hardware        # Hardware-related facts like chassis info
      - config         # Configuration information
      #- interfaces     # Interface details
      - default         # default values
  register: junos_facts
  ignore_errors: true
    
# - name: Debug device details
#   ansible.builtin.debug:
#     msg: 
#       - "software version : {{ junos_facts.ansible_facts.ansible_net_version }}"
#       - "device model     : {{ junos_facts.ansible_facts.ansible_net_model  }}"
#       - "total memory(mb) : {{ junos_facts.ansible_facts.ansible_net_memtotal_mb }}"
#       - "free memory(mb)  : {{ junos_facts.ansible_facts.ansible_net_memfree_mb }}"


- name: Write junos ansible facts
  ansible.builtin.shell: |
    echo "" >> {{ _output_file_ }}
    echo "##### JUNOS ANSIBLE FACTS ####" >> {{ _output_file_ }}
    echo "software version = {{ junos_facts.ansible_facts.ansible_net_version }}" >> {{ _output_file_ }}
    echo "device model     = {{ junos_facts.ansible_facts.ansible_net_model  }}" >> {{ _output_file_ }}
    echo "RE0 Status       : {{ junos_facts.ansible_facts.ansible_net_routing_engines['0']['status']  }}" >> {{ _output_file_ }}
    echo "RE0 Master state = {{ junos_facts.ansible_facts.ansible_net_routing_engines['0']['mastership_state'] }}" >> {{ _output_file_ }}
    echo "RE0 temperature  : {{ junos_facts.ansible_facts.ansible_net_routing_engines['0']['temperature']  }}" >> {{ _output_file_ }}
    echo "RE0 uptime       : {{ junos_facts.ansible_facts.ansible_net_routing_engines['0']['up_time']  }}" >> {{ _output_file_ }}
    echo "RE1 Status       : {{ junos_facts.ansible_facts.ansible_net_routing_engines['1']['status']  }}" >> {{ _output_file_ }}
    echo "RE1 Master state : {{ junos_facts.ansible_facts.ansible_net_routing_engines['1']['mastership_state']  }}" >> {{ _output_file_ }}
    echo "RE1 temperature  : {{ junos_facts.ansible_facts.ansible_net_routing_engines['1']['temperature']  }}" >> {{ _output_file_ }}
    echo "RE1 uptime       : {{ junos_facts.ansible_facts.ansible_net_routing_engines['1']['up_time'] }}" >> {{ _output_file_ }}
  delegate_to: localhost
  ignore_errors: true

# Read the health-checks commands files and create a list of commands to run
# - name: Set more variables
#   ansible.builtin.set_fact:
#     diff_file: "{{ diff_output_html_file }}"
#     command_list: "{{ lookup('file', '{{ health_checks }}').splitlines() }}"
#   delegate_to: localhost

# This task produces a dictionary of results for each command run.
- name: Run command
  junipernetworks.junos.junos_command:
    commands: "{{ item }}"
  register: command_output
  ignore_errors: true
  loop: "{{ _commands_list_ }}"  # A list of commands created from the .txt file of health-checks commands
  loop_control:
    pause: 3  # Time-lag in seconds between iterations to allow commands to run and give an output

- name: Save command output to dynamically named files
  ansible.builtin.copy:
    content: "{{ item.stdout[0] }}"
    dest: "{{ tmp_root_dir }}/{{ item.item | replace(' ', '_') }}.txt"
  loop: "{{ command_output.results }}"
  ignore_errors: true
  delegate_to: localhost
  # when: stdout != "" # Only save output if command was successful

# Combine the output to a single file
- name: "Write health check outputs to {{ _output_file_ }}"
  ansible.builtin.shell: |
    echo "" >> {{ _output_file_ }}
    echo "##### {{ item.item | replace('_', ' ') }} ####" >> {{ _output_file_ }}
    cat  {{ tmp_root_dir }}/{{ item.item | replace(' ', '_') }}.txt >> {{ _output_file_ }}
    echo "" >> {{ _output_file_ }}
  loop: "{{ command_output.results }}"
  delegate_to: localhost

# - name: "Read contents of {{ _output_file_ }}"
#   ansible.builtin.set_fact:
#     file_contents: "{{ lookup('file', '{{ _output_file_ }}') }}"
#   delegate_to: localhost

# - name: Print file contents
#   ansible.builtin.debug:
#     msg: "{{ file_contents }}"
#   delegate_to: localhost  

# git operations
# - name: Import git tasks
#   ansible.builtin.import_tasks: git.yml



















