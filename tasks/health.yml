---
# If you have many .txt files created it's more efficient to write them directly into the local git repo.
# NOT write them on some temporary file and then transfer like the config backup.
- name: Clone the config backup git repository
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes       # Still clone down and overwrite incase local repo is existing.
  # ignore_errors: true # You want your play to fail if there's no repo cloned down
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  delegate_to: localhost

- name: Set inventory_hostname directory name
  ansible.builtin.set_fact:
    inventory_hostname_dir_path: "{{ tmp_root_dir }}/{{ git_repo_name }}/{{ vendor_dir }}/{{ inventory_hostname }}/health-checks"
  delegate_to: localhost

- name: Ensure inventory_hostname dir is present - create if absent
  ansible.builtin.file:
    path: "{{ inventory_hostname_dir_path }}"
    state: directory
  ignore_errors: true
  delegate_to: localhost

- name: Identify commands list
  ansible.builtin.set_fact:
    command_list: "{{ lookup('file', '{{ commands_file }}').splitlines() }}"

# This task produces a dictionary of results for each command run.
# You want to read the 'result' of each item
- name: Run command
  junipernetworks.junos.junos_command:
    commands: "{{ item }}"
  register: command_output
  ignore_errors: true
  loop: "{{ command_list }}"

# - name: Debug outputs
#   ansible.builtin.debug:
#     var: command_output
#   loop: "{{ command_list }}"

- name: Save command output to dynamically named files
  ansible.builtin.copy:
    content: "{{ item.stdout[0] }}"
    dest: "{{ inventory_hostname_dir_path }}/pre-upgrade-health-check-{{ item.item | replace(' ', '_') }}.txt"
  when: pre_checks
  loop: "{{ command_output.results }}"
  ignore_errors: true
  delegate_to: localhost
  # when: stdout != "" # Only save output if command was successful

- name: Save command output to dynamically named files
  ansible.builtin.copy:
    content: "{{ item.stdout[0] }}"
    dest: "{{ inventory_hostname_dir_path }}/post-upgrade-health-check-{{ item.item | replace(' ', '_') }}.txt"
  when: post_checks
  loop: "{{ command_output.results }}"
  ignore_errors: true
  delegate_to: localhost
  # when: stdout != "" # Only save output if command was successful

# ==> Run once tasks
- name: List collected .txt files
  ansible.builtin.shell: |
    ls -l {{ inventory_hostname_dir_path }}
  run_once: true
  delegate_to: localhost
  register: files_collection

- name: Debug output
  ansible.builtin.debug:
    var: files_collection.stdout_lines
  run_once: true
  delegate_to: localhost

# Perform diff checks between pre and post and save it in git too.
- block: 
    - name: Set the file paths
      ansible.builtin.set_fact:
        file_1_base_name: "{{ inventory_hostname_dir_path }}/pre-upgrade-health-check"
        file_2_base_name: "{{ inventory_hostname_dir_path }}/post-upgrade-health-check"
        diff_output_file_base_name: "{{ inventory_hostname_dir_path }}/diff-check"
    
    - name: Compare two files and save the diff output
      ansible.builtin.shell: |
        diff {{ file_1_base_name }}-{{ item.item | replace(' ', '_') }}.txt {{ file_2_base_name }}-{{ item.item | replace(' ', '_') }}.txt > {{ diff_output_file_base_name }}-{{ item.item | replace(' ', '_') }}.txt
      loop: "{{ command_output.results }}"

    # - name: Show diff output
    #   ansible.builtin.command:
    #     cmd: "cat {{ diff_output_file }}"

  when: post_checks
  delegate_to: localhost
  ignore_errors: true

- name: Commit the changes and push to the remote repository
  ansible.builtin.shell: |
     cd {{ tmp_root_dir }}/{{ git_repo_name }}
     git config --global user.name {{ git_user }}
     git config --global user.email {{ git_user_email }}
     git add .
     git commit -m "file updates on $(date)"
     git push
  environment:
    GIT_SSL_NO_VERIFY: "true"
  run_once: true
  ignore_errors: true
  delegate_to: localhost



# Might not need this since containers are ephemeral.
# But if testing or end up running the playbook more than once in the same container, this comes in handy
- name: Clean up files
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost



