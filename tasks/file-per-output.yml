---
### ===> If it is about having a file for each command
# If you have many .txt files created it's more efficient to write them directly into the local git repo.
# NOT write them on some temporary file and then transfer like the config backup.

# Read the health-checks commands files and create a list of commands to run
# - name: Identify commands list
#   ansible.builtin.set_fact:
#     command_list: "{{ lookup('file', '{{ health_checks }}').splitlines() }}"

# # This task produces a dictionary of results for each command run.
# - name: Run command
#   junipernetworks.junos.junos_command:
#     commands: "{{ item }}"
#   register: command_output
#   ignore_errors: true
#   loop: "{{ command_list }}"

# - name: Save command output to dynamically named files
#   ansible.builtin.copy:
#     content: "{{ item.stdout[0] }}"
#     dest: "{{ inventory_hostname_dir_path }}/pre-upgrade-health-check-{{ item.item | replace(' ', '_') }}.txt"
#   when: pre_checks
#   loop: "{{ command_output.results }}"
#   ignore_errors: true
#   delegate_to: localhost
#   # when: stdout != "" # Only save output if command was successful

# - name: Save command output to dynamically named files
#   ansible.builtin.copy:
#     content: "{{ item.stdout[0] }}"
#     dest: "{{ inventory_hostname_dir_path }}/post-upgrade-health-check-{{ item.item | replace(' ', '_') }}.txt"
#   when: post_checks
#   loop: "{{ command_output.results }}"
#   ignore_errors: true
#   delegate_to: localhost
#   # when: stdout != "" # Only save output if command was successful

#  - name: Save health check outputs to a file
# ansible.builtin.copy:
#   content: "{{ item.stdout[0] }}"
#   dest: "{{ inventory_hostname_dir_path }}/pre-upgrade-health-check-{{ item.item | replace(' ', '_') }}.txt"
# loop: "{{ command_output.results }}"
# ignore_errors: true
# delegate_to: localhost
# # when: stdout != "" # Only save output if command was successful

### ===> Here we have 1 file for pre-checks and 1 file for post-checks.
### Makes it easier to do a diff between the 2 and have one output.

# - name: Debug outputs
#   ansible.builtin.debug:
#     var: command_output
#   loop: "{{ command_list }}"

# # Perform diff checks between pre and post and save it in git too.
# - block: 
#     - name: Set the file paths
#       ansible.builtin.set_fact:
#         file_1_base_name: "{{ inventory_hostname_dir_path }}/pre-upgrade-health-check"
#         file_2_base_name: "{{ inventory_hostname_dir_path }}/post-upgrade-health-check"
#         # diff_output_file_base_name: "{{ inventory_hostname_dir_path }}/diff-check"
#         diff_output_report: "{{ inventory_hostname_dir_path }}/post-upgrade-diff-report.txt"
    
#     # - name: Compare two files and save the diff output
#     #   ansible.builtin.shell: |
#     #     diff -y {{ file_1_base_name }}-{{ item.item | replace(' ', '_') }}.txt {{ file_2_base_name }}-{{ item.item | replace(' ', '_') }}.txt > {{ diff_output_file_base_name }}-{{ item.item | replace(' ', '_') }}.txt
#     #   loop: "{{ command_output.results }}"

#     - name: Refresh diff-report file
#       ansible.builtin.shell: |
#         echo "" > {{ diff_output_report }}
#       delegate_to: localhost
    
#     # TPG want just 1 diff file with all the outputs shown.
#     - name: Compare two files and write to diff-report file
#       ansible.builtin.shell: |
#         echo "" >> {{ diff_output_report }}
#         echo "##### command : {{ item.item }}" >> {{ diff_output_report }}
#         echo "" >> {{ diff_output_report }}
#         diff -y {{ file_1_base_name }}-{{ item.item | replace(' ', '_') }}.txt {{ file_2_base_name }}-{{ item.item | replace(' ', '_') }}.txt >> {{ diff_output_report }}
#         echo "" >> {{ diff_output_report }}
#       loop: "{{ command_output.results }}"

#     # - name: Show diff output
#     #   ansible.builtin.command:
#     #     cmd: "cat {{ diff_output_file }}"

#   when: post_checks
#   delegate_to: localhost
#   ignore_errors: true

# # ==> Run once tasks
# - name: List collected .txt files
#   ansible.builtin.shell: |
#     ls -l {{ inventory_hostname_dir_path }}
#   run_once: true
#   delegate_to: localhost
#   register: files_collection

# - name: Debug output
#   ansible.builtin.debug:
#     var: files_collection.stdout_lines
#   run_once: true
#   delegate_to: localhost

# - name: Commit the changes and push to the remote repository
#   ansible.builtin.shell: |
#      cd {{ tmp_root_dir }}/{{ git_repo_name }}
#      git config --global user.name {{ git_user }}
#      git config --global user.email {{ git_user_email }}
#      git add .
#      git commit -m "file updates on $(date)"
#      git push
#   environment:
#     GIT_SSL_NO_VERIFY: "true"
#   run_once: true
#   ignore_errors: true
#   delegate_to: localhost



# # Might not need this since containers are ephemeral.
# # But if testing or end up running the playbook more than once in the same container, this comes in handy
# - name: Clean up files
#   ansible.builtin.shell: |
#     cd {{ tmp_root_dir }}
#     rm -rf {{ git_repo_name }}
#   run_once: true
#   ignore_errors: true
#   delegate_to: localhost